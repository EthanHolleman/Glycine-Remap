#!/usr/bin/env python3
import os
import time

from args import set_args
from args import check_depends
from Run.run import Run
from Transposer.sam_utils import sort_elements
from Transposer.sam_utils import sort_sams
from Transposer.sam_utils import rename_elements
from Transposer.sam_utils import pruner
from Transposer.sam_utils import write_results

from Backmap.backmap import *
from Backmap.backmap_write import *
from Backmap.feature_reader import *
from Backmap.anchored_remap import *
from Backmap.shortest_path import run_min_distance


def main():
    args = set_args()  # read args and assign to args

    intact_old = args.I
    solo_old = args.S
    BDB_old = args.P
    BDB_cur = args.C
    output = args.O
    BTI = args.B
    acc_old = args.acc_o
    acc_cur = args.acc_c
    run_name = args.name
    backmap = int(args.M)
    min = args.E
    feats = args.F
    summary = args.sum

    new_run = Run(cur_BDB=BDB_cur, old_BDB=BDB_old, BTI=BTI,
                  cur_acc=acc_cur, old_acc=acc_old, run_name=run_name,
                  output=output, cie=intact_old, csi=solo_old, min_els=min)
    # do everything up to including bowtieing all the consensus sequences
    new_run.make_clstr_fastas()
    new_run.make_consensensi_teo()
    new_run.make_jobs_two()

    new_run.run_jobs()  # run bowtie jobs

    sels = list(rename_elements(pruner(sort_sams(new_run.jobs), f=100)))
    out_base = os.path.join(new_run.write_dirs[2], run_name)
    write_results(sels, out_base)

    print('Running Backmapping')
    old_els = make_soy_elements(summary, acc_old)

    if sum:
        old_els = make_soy_elements(summary, acc_old)
        if backmap == 1:
            min_log = os.path.join(
                new_run.write_dirs[2], run_name + '_log.txt')
            matches, unmatches = run_min_distance(sels, old_els, min_log)
        else:
            if backmap == 2:
                old_els = add_flanks(old_els, BDB_old)
                flank_dict = make_flank_dict(old_els)
                chr_index = chr_indexer(flank_dict)
                matches, unmatches, flank_dict = test_exact(
                    flank_dict, sels)
                matches, unmatches, chr_index = rum_ham(
                    chr_index, unmatches, matches)
            elif backmap == 3:
                chr_index = feature_sort(old_els, key=lambda x: x.startLocation)
                matches, unmatches, chr_index = anchored_Backmap(chr_index, sels,
                                                                 [], feats)

        match_path = os.path.join(
            new_run.write_dirs[2], run_name + '_matches.csv')
        unmatch_path = os.path.join(
            new_run.write_dirs[2], run_name + '_unmatched.csv')
        match_writer(match_formater(matches), match_path)
        nomatch_writer(unmatches, unmatch_path)


if __name__ == '__main__':
    main()
